// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
function displayError(elementId, message) {
    const element = document.getElementById(elementId);
    if (element) {
        element.innerHTML = `<p class="text-danger">${message}</p>`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    console.log('cart.js –∑–∞–≥—Ä—É–∂–µ–Ω'); // –û—Ç–ª–∞–¥–∫–∞

    const cartItems = document.getElementById('cartItems');
    const orderSummary = document.getElementById('orderSummary');
    const totalPrice = document.getElementById('totalPrice');
    const checkoutBtn = document.querySelector('.checkout-btn');
    const cartCount = document.getElementById('cartCount');

    if (!cartItems || !orderSummary || !totalPrice || !checkoutBtn || !cartCount) {
        console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    const loadCart = async () => {
        try {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...'); // –û—Ç–ª–∞–¥–∫–∞
            const response = await fetch('/api/cart');
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É');
            }

            const items = await response.json();
            console.log('–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:', items); // –û—Ç–ª–∞–¥–∫–∞

            cartItems.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            orderSummary.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∏—Ç–æ–≥–∏
            let total = 0;
            let itemCount = 0;

            if (items.length === 0) {
                cartItems.innerHTML = '<p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>';
                totalPrice.textContent = '$0';
                checkoutBtn.textContent = '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ $0';
                cartCount.textContent = '0';
                return;
            }

            items.forEach(item => {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="/static/images/food-placeholder.jpg" alt="${item.menu_name}">
                    <div class="cart-item-details">
                        <h5>${item.menu_name}</h5>
                        <p>${item.menu_description}</p>
                        <div class="quantity-control">
                            <button onclick="updateQuantity(${item.id}, ${item.quantity - 1})">-</button>
                            <input type="text" value="${item.quantity}" readonly>
                            <button onclick="updateQuantity(${item.id}, ${item.quantity + 1})">+</button>
                        </div>
                    </div>
                    <div>
                        <p><strong>$${item.menu_price}</strong></p>
                        <button class="remove-btn" onclick="removeItem(${item.id})">üóëÔ∏è</button>
                    </div>
                `;
                cartItems.appendChild(cartItem);

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∏—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞
                const summaryItem = document.createElement('div');
                summaryItem.className = 'order-summary-item';
                summaryItem.innerHTML = `
                    <span>${item.quantity}x ${item.menu_name}</span>
                    <span>$${item.menu_price * item.quantity}</span>
                `;
                orderSummary.appendChild(summaryItem);

                total += item.menu_price * item.quantity;
                itemCount += item.quantity;
            });

            totalPrice.textContent = `$${total}`;
            checkoutBtn.textContent = `–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ $${total}`;
            cartCount.textContent = itemCount.toString();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            displayError('cartItems', error.message);
        }
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    window.updateQuantity = async (itemId, newQuantity) => {
        if (newQuantity < 1) {
            removeItem(itemId);
            return;
        }

        try {
            const response = await fetch('/api/cart', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ cart_id: itemId, quantity: newQuantity }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
            }

            await loadCart(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
            displayError('cartItems', error.message);
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    window.removeItem = async (itemId) => {
        try {
            const response = await fetch('/api/cart', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ cart_id: itemId }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä');
            }

            await loadCart(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
            displayError('cartItems', error.message);
        }
    };

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    window.applyPromoCode = () => {
        const promoCode = document.getElementById('promoCode').value;
        if (promoCode) {
            alert('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).');
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.');
        }
    };

    // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    window.checkout = async () => {
        try {
            const response = await fetch('/api/order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ delivery_address: '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏' }), // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
            }

            alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
            window.location.href = '/my-orders';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
            displayError('cartItems', error.message);
        }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await loadCart();
});